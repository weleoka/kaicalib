# To do in properties
# - persistence units, one 'default' for business and another for users db.
# - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
# - consider setting the 'logging.level.web' property to 'DEBUG'
# - Use H2 or HSQL datasources for development. It seems the DDL has to be present for them to build?
# todo Can't access the /console for H2 database...
# todo Why is logging not playing the game? Logger levels can be adjusted but that's it in IDE. Commandline different again.
# todo Implemente the multiple datasources method described here:
#   https://therealdanvega.com/blog/2017/06/26/spring-boot-configuration-using-yaml
#

---

server:
  port: 8080

spring:

    # ===============================
    # = PROFILES configurations
    # ===============================
    profiles:
        #active: dev
        #active: test
        active: prod
        #include: datasource-mysql
        #include: datasource-hsql
        #include: datasource-h2
        include:
            - basics
            - datasource-mysql
            #- datasource-hsql
            #- datasource-h2
            - datasource-accounts-mysql

---
spring:
    profiles: basics
    application:
        name: kaicalib

    # ===============================
    # = OTHER SPRING configurations
    # ===============================
    mvc:
        favicon.enabled: true
    main:
        banner-mode: 'off' # quoted because off maps to false in YML. Other possibles is CONSOLE or LOG.
        #allow-bean-definition-overriding: true
    output:
        ansi:
            enabled: ALWAYS

    # Lets locale enabled messages setting
    messages:
        use-code-as-default-message: true
        fallback-to-system-locale: true





---
spring:
    profiles: dev

    # ===============================
    # = JPA configurations
    # ===============================
    data:
        jpa:
            repositories:
                #bootstrap-mode: LAZY

    jpa:
        show-sql: true
        open-in-view: false # Recommended for production

        # ===============================
        # = HIBERNATE DEV configurations
        # ===============================

        properties:
            #hibernate.id.new_generator_mappings: true
            #hibernate.connection.provider_disables_autocommit: true
            #hibernate.cache.use_second_level_cache: true
            #hibernate.cache.use_query_cache: false
            #hibernate.generate_statistics: true
            hibernate.jdbc.time_zone: UTC

        hibernate:
            show-sql: true
            use_sql_comments: true
            format_sql: true
            # ddl-auto: 'create-drop' # WARNING Specified in core/config/CoreDbConfig.java and accounts/config/accountsDbConfig.java
            naming:
                physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
                implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy

    # ===============================
    # = DEVTOOLS DEV configurations
    # ===============================
    devtools:
        restart:
            enabled: true
            exclude: static/**,core/**,fragments/**,account/**
            # Excludes changes to webbapp files as they reload without a restart.
        livereload:
            enabled: true
        add-properties: false

    # ===============================
    # = THYMELEAF DEV configurations
    # ===============================
    thymeleaf:
        prefix: file:./src/main/webapp/
        suffix: .html
        mode: HTML
        cache: false

# ===============================
# = LOGGING DEV configurations
# ===============================
# Logging groups can be created for switching batches of loggers.
# https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-logging.html#boot-features-custom-log-groups
logging:
    #file: logs/dev_app.log
    level:
        root: INFO
        org.springframework.web: WARN
        org.springframework.security: WARN
        org.springframework.security.web: DeBUG
        org.springframework.security.web.FilterChainProxy: WARN # FilterChainProxy
        org.springframework.security.web.access.FilterSecurityInterceptor: WARN # FilterSecurityInterceptor
        org.springframework.security.web.util.matcher: WARN # OrRequestMatcher & AntRequestMatcher
        # org.springframework.security.web.util.matcher.AntRequestMatcher: WARN #

        org.hibernate: DEBUG
        com.datasources: DEBUG
    pattern:
        console: "%d{HH:mm:ss.SSS} %highlight(%-5level) [%-20.30logger{10}] - %msg%n"
        #console: "%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) [%-40.40logger{10}] - %msg%n"
        #console: "%-5level %logger : %msg%n"
        #console: "%d %-5level %logger : %msg%n"
        #file: "%d %-5level [%thread] %logger : %msg%n"

# ===============================
# = KAICALIB configurations for DEV
#
# The main place with connection configurations
#
# ===============================
kaicalib:
    account:
        jpa:
            ddl_auto: create # create, create-drop, validate
            #dialect: org.hibernate.dialect.MySQL5Dialect
            dialect: org.hibernate.dialect.MariaDB103Dialect
            storage_engine: innodb # innodb is default? #spring.jpa.properties.hibernate.dialect.storage_engine=innodb
        load_initial: true

    core:
        jpa:
            ddl_auto: create
            #dialect: org.hibernate.dialect.MySQL5InnoDBDialect
            dialect: org.hibernate.dialect.MariaDB103Dialect
            storage_engine: innodb
        load_initial: true






---
spring:
    profiles: prod

    jpa:
        show-sql: false
        open-in-view: false



    # ===============================
    # = THYMELEAF PROD configurations
    # ===============================
    thymeleaf:
        prefix: file:./src/main/webapp/
        suffix: .html
        mode: HTML
        cache: true



# ===============================
# = Logging configurations for PROD
# ===============================
# Logging groups can be created for switching batches of loggers.
# https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-logging.html#boot-features-custom-log-groups
logging:
    file: /var/log/kaicalib.log
    level:
        root: INFO

    pattern:
        console: "%d{HH:mm:ss.SSS} %highlight(%-5level) [%-20.30logger{10}] - %msg%n"

# ===============================
# = KAICALIB configurations for PROD
# Persistence connection configurations
# ===============================
kaicalib:
    account:
        jpa:
            ddl_auto: create # create, create-drop, validate
            #dialect: org.hibernate.dialect.MySQL5Dialect
            dialect: org.hibernate.dialect.MariaDB103Dialect
            storage_engine: innodb # innodb is default? #spring.jpa.properties.hibernate.dialect.storage_engine=innodb
        load_initial: true

    core:
        jpa:
            ddl_auto: create
            #dialect: org.hibernate.dialect.MySQL5InnoDBDialect
            dialect: org.hibernate.dialect.MariaDB103Dialect
            storage_engine: innodb
        load_initial: true














# ======================== DATASOURCES ===================

---
spring:
    profiles: datasource-hsql

datasource:
    name: HSQL-datasource
    #shutdown=true can be used in the url to disable the database's automatic shutdown.
    #url: jdbc:hsqldb:file:./hsqldb_data/testdb
    url: jdbc:hsqldb:mem:kaicalib_db
    #platform: all # all is default for data.sql and schema.sql files for loading.


---
spring:
    profiles: datasource-h2

    h2: # Have to test if these are parsed
        console: # Allows http://localhost:8080/console as a dbms tool
            enabled: true
            path: /console  # default is /h2-console
            settings:
                trace: false
                web-allow-others: false

datasource:
    username: auser
    password: apass
    name: H2-datasource
    url: jdbc:h2:mem:kaicalib_db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    #initialize: true # Reading of schema.sql and data.sql files.
    #url: jdbc:h2:mem:kaicalib_db;DB_CLOSE_DELAY=-1;MODE=MYSQL;INIT=CREATE SCHEMA IF NOT EXISTS calendar
    #url: jdbc:h2:file:~/h2/app_db;

    # https://h2database.com/html/features.html#connection_modes
    # DB_CLOSE_DELAY=-1 # h2 will keep its content as long as the vm lives.
    # DB_CLOSE_ON_EXIT=FALSE

    #platform: h2 # Modifies suffix (such as schema-${platform}.sql or data-${platform}.sql)
    # schema.sql hibernate creates the required schema but this can be useful
    # todo How useful, how much time is saved by running DDL from file than for hibernate to generate it at runtime?
    # note spring.datasource.initialization-mode=always is default if in-memory DB is used.



---
spring:
    profiles: datasource-mysql

datasource:
    username: kaicalib_db_user
    password: enter112
    name: MariaDB-datasource
    url: jdbc:mysql://localhost:3306/kaicalib_db?useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true



---
spring:
    profiles: datasource-accounts-mysql # For the accounts module

accounts-datasource:
    username: kaicalib_db_user
    password: enter112
    name: MariaDB-accounts-datasource
    url: jdbc:mysql://localhost:3306/kaicalib_accounts_db?useLegacyDatetimeCode=false&serverTimezone=UTC
    #platform: account # data-account.sql and schema-account.sql for preloading
    initialization-mode: always
